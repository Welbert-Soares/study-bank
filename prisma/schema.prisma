// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                    @id
  email            String                    @unique
  name             String?
  imageUrl         String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  // Relações
  materias         Materia[]
  agendamentos     DiaDisciplinaMateria[]
  planosDeEstudo   PlanoDeEstudos[]
  historicosEstudo HistoricoEstudo[]
  ferramentas      FerramentaPersonalizada[]
  // Novos modelos
  planos           Plano[]
  disciplinas      Disciplina[]
  ciclosPomodoro   CicloPomodoro[]
}

enum DisciplinaNome {
  TI
  Ingles
  Portugues
  Estatistica
  Atualidades
  Bancarios
  Matematica
  Simulado
  Revisoes
  Redacao
}

enum DiaDaSemana {
  Domingo
  Segunda
  Terca
  Quarta
  Quinta
  Sexta
  Sabado
}

enum StatusConteudo {
  pendente
  em_progresso
  concluido
}

model Materia {
  id           String         @id @default(cuid())
  userId       String // Relação com o usuário
  titulo       String
  descricao    String?
  status       StatusConteudo @default(pendente)
  ordem        Int
  disciplina   DisciplinaNome
  criadoEm     DateTime       @default(now())
  atualizadoEm DateTime       @updatedAt

  // Relações
  user         User                   @relation(fields: [userId], references: [id])
  agendamentos DiaDisciplinaMateria[]

  @@index([userId])
}

model DiaDisciplinaMateria {
  id            String          @id @default(cuid())
  userId        String // Relação com o usuário
  dia           DiaDaSemana
  materiaId     String
  materia       Materia         @relation(fields: [materiaId], references: [id])
  planoId       String? // Opcional para manter compatibilidade com registros existentes
  plano         PlanoDeEstudos? @relation(fields: [planoId], references: [id])
  status        StatusConteudo  @default(pendente)
  tempoEstudado Int? // Em minutos
  anotacoes     String?
  progresso     Int             @default(0) // Progresso em porcentagem
  criadoEm      DateTime        @default(now())
  atualizadoEm  DateTime        @updatedAt

  // Relações
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([materiaId])
  @@index([planoId])
}

model FerramentaPersonalizada {
  id           String   @id @default(cuid())
  userId       String // Relação com o usuário
  nome         String
  descricao    String?
  url          String
  tipo         String // Exemplo: "kanban", "flashcards", "estudar", "continuar"
  icone        String?
  ordem        Int      @default(0)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relações
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PlanoDeEstudos {
  id             String                 @id @default(cuid())
  userId         String // Relação com o usuário
  titulo         String
  dataInicio     DateTime
  dataFim        DateTime?
  ativo          Boolean                @default(true)
  progressoGeral Int                    @default(0) // Progresso geral do plano em porcentagem
  registros      DiaDisciplinaMateria[] // Relação com os registros de estudo
  criadoEm       DateTime               @default(now())
  atualizadoEm   DateTime               @updatedAt

  // Relações
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Tabela para armazenar o histórico de estudos de matérias deletadas
model HistoricoEstudo {
  id              String         @id @default(cuid())
  userId          String // Relação com o usuário
  tituloDaMateria String // Nome da matéria quando foi deletada
  disciplina      DisciplinaNome
  dataEstudo      DateTime
  tempoEstudado   Int // Em minutos
  anotacoes       String?
  progresso       Int            @default(0) // Progresso que tinha sido alcançado
  planoId         String? // Referência opcional ao plano de estudos, caso existisse 
  criadoEm        DateTime       @default(now())

  // Relações
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([disciplina])
  @@index([dataEstudo])
}

// ========================================
// NOVOS MODELOS - Sistema Estudei Style
// ========================================

// Plano de Estudos (novo conceito - substitui PlanoDeEstudos)
model Plano {
  id           String   @id @default(cuid())
  userId       String
  nome         String
  emblema      String? // URL da imagem do edital
  edital       String? // Nome do edital (ex: "Polícia Federal")
  cargo        String? // Nome do cargo (ex: "Agente de Polícia Federal")
  observacoes  String?  @db.Text
  ativo        Boolean  @default(true)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relações
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  disciplinas Disciplina[]

  @@index([userId])
  @@index([ativo])
}

// Disciplina (nova estrutura com hierarquia de tópicos)
model Disciplina {
  id           String         @id @default(cuid())
  userId       String
  planoId      String
  nome         String
  cor          String? // Cor personalizada em hexadecimal (ex: "#3DD9B3")
  descricao    String?        @db.Text
  ordem        Int            @default(0)
  edital       String? // Badge do edital (ex: "PF", "TRF", etc)
  cargo        String? // Cargo relacionado
  status       StatusConteudo @default(pendente)
  criadoEm     DateTime       @default(now())
  atualizadoEm DateTime       @updatedAt

  // Relações
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  plano          Plano           @relation(fields: [planoId], references: [id], onDelete: Cascade)
  topicos        Topico[]
  ciclosPomodoro CicloPomodoro[]

  @@index([userId])
  @@index([planoId])
  @@index([status])
}

// Tópico (conteúdo dentro de uma disciplina)
model Topico {
  id           String         @id @default(cuid())
  disciplinaId String
  ordem        Int
  titulo       String
  conteudo     String?        @db.Text // Conteúdo detalhado do tópico
  status       StatusConteudo @default(pendente)
  criadoEm     DateTime       @default(now())
  atualizadoEm DateTime       @updatedAt

  // Relações
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)

  @@index([disciplinaId])
  @@index([status])
}

// Ciclo Pomodoro (sistema de planejamento de estudos por tempo)
model CicloPomodoro {
  id           String   @id @default(cuid())
  userId       String
  disciplinaId String
  duracao      Int // Duração em minutos
  ordem        Int // Ordem no ciclo de estudos
  completo     Boolean  @default(false)
  data         DateTime @default(now()) // Data do ciclo
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relações
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([disciplinaId])
  @@index([data])
  @@index([completo])
}
